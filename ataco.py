# -*- coding: utf-8 -*-
"""AarthyTACO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oU_VhA1KV4NP8CALtixRMZeevPceBSm3

#Kaggle TACO to YOLOv5
"""

from google.colab import files
files.upload()  # Upload kaggle.json here

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d vencerlanz09/taco-dataset-yolo-format

import zipfile
import os

with zipfile.ZipFile('taco-dataset-yolo-format.zip', 'r') as zip_ref:
    zip_ref.extractall('/content/taco-dataset-yolo-format')

!kaggle datasets list

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5
!pip install -r requirements.txt

!pip install comet_ml

!ls /content/yolov5/valid/images

!ls /content/taco-dataset-yolo-format/valid

data_yaml_content ="""
train: /content/taco-dataset-yolo-format/train/images
val: /content/taco-dataset-yolo-format/valid/images

nc: 18  # Number of classes (adjust this according to your dataset)
names: ['Plastic', 'Paper', 'Metal', 'Glass', 'Trash', 'Organic Waste', 'Other', 'Rubber', 'Textile', 'Carton', 'Cigarette', 'Cup',
        'Food waste', 'Lid', 'Other plastic', 'Paper','Plastic bag','bottle']"""  # Replace with actual class names
with open('/content/taco-dataset-yolo-format/data.yaml', 'w') as file:
    file.write(data_yaml_content)

!python /content/yolov5/train.py --img 640 --batch 16 --epochs 50 --data /content/taco-dataset-yolo-format/data.yaml --weights yolov5s.pt

"""#Evaluate"""

!pip install utils

from utils.plots import plot_results
plot_results('/content/yolov5/runs/train/exp/results.csv')

import os
os.makedirs('/content/test_images', exist_ok=True)

!find /content/test_images -type f

!python /content/yolov5/detect.py --weights /content/yolov5/runs/train/exp/weights/best.pt --img 640 --conf 0.5 --source /content/test_images

from google.colab import files
files.download('/content/yolov5/runs/train/exp/weights/best.pt')

"""##For PC to check detection"""

import torch

import torch
import cv2
from google.colab.patches import cv2_imshow  # For displaying frames in Colab

# Load the trained YOLOv5 model with torch.hub
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/yolov5/runs/train/exp/weights/best.pt', force_reload=True)

# Use a video file as a source (for Colab)
cap = cv2.VideoCapture('/content/file.mp4')  # Replace with actual video path

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("End of video.")
        break

    # Run inference on the frame
    results = model(frame)

    # Render results on the frame
    frame = results.render()[0]  # Rendered frame as array

    # Display the frame
    cv2_imshow(frame)  # Display frame in Colab

cap.release()

"""#Alarm"""

from google.colab import files
uploaded = files.upload()  # Upload your alarm sound file

import torch
import cv2
import numpy as np
from google.colab.patches import cv2_imshow  # For displaying frames in Colab
from IPython.display import Audio, display  # For sound playback in Colab

# Load the trained YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/yolov5/runs/train/exp/weights/best.pt', force_reload=True)

# Load the video file as the source
cap = cv2.VideoCapture('/content/your_video_file.mp4')  # Replace with actual video path

def play_alarm():
    """Play alarm sound in Colab."""
    display(Audio('/content/alarm.mp3', autoplay=True))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("End of video.")
        break

    # Run inference on the frame
    results = model(frame)
    detected = len(results.pred[0]) > 0  # Check if any object is detected

    # Play alarm if trash is detected
    if detected:
        play_alarm()

    # Render and display the frame
    frame = np.squeeze(results.render())
    cv2_imshow(frame)  # Display the frame in Colab

    # Optional delay for real-time display
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()

"""#Connecting backend to frontend"""

pip install flask